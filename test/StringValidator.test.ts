import { StringValidator } from "../src"

describe("StringValidator", () => {
    it("", () => {
        const isString = new StringValidator().seal()
        expect(isString(null)).toBeFalsy()
        expect(isString(undefined)).toBeFalsy()
        expect(isString(123)).toBeFalsy()
        expect(isString("123")).toBeTruthy()
    })
    it("contains", () => {
        const containsHello = new StringValidator().contains("hello").seal()
        expect(containsHello(123)).toBeFalsy()
        expect(containsHello("abc")).toBeFalsy()
        expect(containsHello("Hello")).toBeFalsy()
        expect(containsHello("hello")).toBeTruthy()

        const containsHelloIgnoreCasing = new StringValidator().contains("hello", true).seal()
        expect(containsHelloIgnoreCasing(123)).toBeFalsy()
        expect(containsHelloIgnoreCasing("abc")).toBeFalsy()
        expect(containsHelloIgnoreCasing("ABC")).toBeFalsy()
        expect(containsHelloIgnoreCasing("hello")).toBeTruthy()
        expect(containsHelloIgnoreCasing("Hello")).toBeTruthy()
        expect(containsHelloIgnoreCasing("HELLO")).toBeTruthy()
    })
    it("equals", () => {
        const isABC = new StringValidator().equals("abc").seal()
        expect(isABC(123)).toBeFalsy()
        expect(isABC("ABC")).toBeFalsy()
        expect(isABC("abc")).toBeTruthy()
    })
    it("equalsIgnoreCasing", () => {
        const isAbcIgnoreCasing = new StringValidator().equalsIgnoreCasing("abc").seal()
        expect(isAbcIgnoreCasing(123)).toBeFalsy()
        expect(isAbcIgnoreCasing("Hello World")).toBeFalsy()
        expect(isAbcIgnoreCasing("ABC")).toBeTruthy()
        expect(isAbcIgnoreCasing("abc")).toBeTruthy()
    })
    it("equalsOneOf", () => {
        const isYesOrNo = new StringValidator().equalsOneOf("yes", "no").seal()
        expect(isYesOrNo(123)).toBeFalsy()
        expect(isYesOrNo("some string")).toBeFalsy()
        expect(isYesOrNo("yes no")).toBeFalsy()
        expect(isYesOrNo("YES")).toBeFalsy()
        expect(isYesOrNo("NO")).toBeFalsy()
        expect(isYesOrNo("yes")).toBeTruthy()
        expect(isYesOrNo("no")).toBeTruthy()
    })
    it("equalsOneOf", () => {
        const isYesOrNoIgnoreCasing = new StringValidator().equalsOneOfIgnoreCasing("yes", "no").seal()
        expect(isYesOrNoIgnoreCasing(123)).toBeFalsy()
        expect(isYesOrNoIgnoreCasing("some string")).toBeFalsy()
        expect(isYesOrNoIgnoreCasing("yes no")).toBeFalsy()
        expect(isYesOrNoIgnoreCasing("YES")).toBeTruthy()
        expect(isYesOrNoIgnoreCasing("NO")).toBeTruthy()
        expect(isYesOrNoIgnoreCasing("yes")).toBeTruthy()
        expect(isYesOrNoIgnoreCasing("no")).toBeTruthy()
    })
    it("hasLength", () => {
        const isTwoCharsLong = new StringValidator().hasLength(2).seal()
        expect(isTwoCharsLong(123)).toBeFalsy()
        expect(isTwoCharsLong("yes")).toBeFalsy()
        expect(isTwoCharsLong("!")).toBeFalsy()
        expect(isTwoCharsLong("no")).toBeTruthy()
        expect(isTwoCharsLong("hi")).toBeTruthy()
    })
    it("match", () => {
        const isMail = new StringValidator().match(/\w+@\w+\.\w+/).seal()
        expect(isMail(123)).toBeFalsy()
        expect(isMail("abc")).toBeFalsy()
        expect(isMail("abc.com")).toBeFalsy()
        expect(isMail("www.example.com")).toBeFalsy()
        expect(isMail("foo@example.com")).toBeTruthy()
        expect(isMail("foo@bar.com")).toBeTruthy()
    })
})
